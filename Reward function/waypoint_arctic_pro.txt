import math


def dist(point1, point2):
    return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5

def rect(r, theta):
    """
    theta in degrees

    returns tuple; (float, float); (x,y)
    """

    x = r * math.cos(math.radians(theta))
    y = r * math.sin(math.radians(theta))
    return x, y

def polar(x, y):
    """
    returns r, theta(degrees)
    """

    r = (x ** 2 + y ** 2) ** .5
    theta = math.degrees(math.atan2(y,x))
    return r, theta


def angle_mod_360(angle):
    """
    Maps an angle to the interval -180, +180.

    Examples:
    angle_mod_360(362) == 2
    angle_mod_360(270) == -90

    :param angle: angle in degree
    :return: angle in degree. Between -180 and +180
    """

    n = math.floor(angle/360.0)

    angle_between_0_and_360 = angle - n*360.0

    if angle_between_0_and_360 <= 180.0:
        return angle_between_0_and_360
    else:
        return angle_between_0_and_360 - 360


def get_waypoints_ordered_in_driving_direction(params, mod_waypoints):
    # waympoints are aulways providded in countrer clock wi3se ord3er
    if params['is_reversed']: # driving clock wise.
        return list(reversed(mod_waypoints))
    else: # driving counter clock wise.
        return mod_waypoints


def up_sample(waypoints, factor):
    """
    Adds extra waypoints in between provided waypoints

    :param waypoints:
    :param factor: integer. E.g. 3 means that the resulting list has 3 times as many points.
    :return:
    """
    p = waypoints
    n = len(p)

    return [[i / factor * p[(j+1) % n][0] + (1 - i / factor) * p[j][0],
             i / factor * p[(j+1) % n][1] + (1 - i / factor) * p[j][1]] for j in range(n) for i in range(factor)]


def get_target_point(params):
    #mod_waypoints = RACE
    #waypoints = up_sample(get_waypoints_ordered_in_driving_direction(params, mod_waypoints), 3)
	waypoints = RACE

    car = [params['x'], params['y']]

    distances = [dist(p, car) for p in waypoints]
    min_dist = min(distances)
    i_closest = distances.index(min_dist)

    n = len(waypoints)

    waypoints_starting_with_closest = [waypoints[(i+i_closest) % n] for i in range(n)]

    if params['steps'] < 15:
        mul_factor = 0.75
    elif params['steps'] < 25:
        mul_factor = 0.5
    else:
        mul_factor = 0.3

    r = params['track_width'] * mul_factor

    is_inside = [dist(p, car) < r for p in waypoints_starting_with_closest]
    i_first_outside = is_inside.index(False)

    if i_first_outside < 0:  # this can only happen if we choose r as big as the entire track
        return waypoints[i_closest]

    return waypoints_starting_with_closest[i_first_outside]


def get_target_steering_degree(params):
    tx, ty = get_target_point(params)
    car_x = params['x']
    car_y = params['y']
    dx = tx-car_x
    dy = ty-car_y
    heading = params['heading']

    _, target_angle = polar(dx, dy)

    steering_angle = target_angle - heading

    return angle_mod_360(steering_angle)


def score_steer_to_point_ahead(params):
    best_stearing_angle = get_target_steering_degree(params)
    steering_angle = params['steering_angle']

    error = (steering_angle - best_stearing_angle) / 60.0  # 60 degree is already really bad

    score = 1.0 - abs(error)

    reward = max(score, 0.01)

    progress = params['progress']
    steps = params['steps']

    reward += (progress / steps)
    
    if(params['is_offtrack']):
        reward = 0.00001

    return reward  # optimizer is rumored to struggle with negative numbers and numbers too close to zero MUDR33


RACE = [
        [6.81240152, 3.58166442],
        [6.59717043, 3.64926833],
        [6.36691619, 3.70142457],
        [6.12593063, 3.74102300],
        [5.87861609, 3.77230203],
        [5.62885404, 3.80012298],
        [5.37909055, 3.82794845],
        [5.12932611, 3.85578048],
        [4.87955999, 3.88361645],
        [4.62979293, 3.91145754],
        [4.38002443, 3.93930352],
        [4.13024680, 3.96700157],
        [3.88048305, 3.99444881],
        [3.63077860, 4.02163675],
        [3.38130224, 4.04818111],
        [3.13221733, 4.07366722],
        [2.88364810, 4.09769111],
        [2.63572050, 4.11983102],
        [2.38856197, 4.13967033],
        [2.14231234, 4.15676950],
        [1.89711854, 4.17068165],
        [1.65314338, 4.18092651],
        [1.41056378, 4.18699754],
        [1.16957576, 4.18834984],
        [0.93037294, 4.18446602],
        [0.69324916, 4.17456242],
        [0.45854142, 4.15777022],
        [0.22663249, 4.13313993],
        [-0.00201447, 4.09955973],
        [-0.22676151, 4.05553067],
        [-0.44684353, 3.99934530],
        [-0.66128474, 3.92893099],
        [-0.86869371, 3.84146731],
        [-1.07053593, 3.74087448],
        [-1.26823187, 3.63048712],
        [-1.46321016, 3.51359244],
        [-1.65686975, 3.39350825],
        [-1.85474097, 3.27432952],
        [-2.05432600, 3.15821404],
        [-2.25577819, 3.04573662],
        [-2.45925312, 2.93747775],
        [-2.66491279, 2.83404347],
        [-2.87303757, 2.73634553],
        [-3.08393417, 2.64543576],
        [-3.29791487, 2.56246904],
        [-3.51536432, 2.48891608],
        [-3.73696642, 2.42737876],
        [-3.96197012, 2.37634285],
        [-4.18979553, 2.33450845],
        [-4.41994934, 2.30071418],
        [-4.65202230, 2.27402663],
        [-4.88561806, 2.25350791],
        [-5.12038362, 2.23829057],
        [-5.35599973, 2.22748059],
        [-5.59219608, 2.22018361],
        [-5.82876495, 2.21559269],
        [-6.06555229, 2.21297825],
        [-6.29663916, 2.21174438],
        [-6.52668364, 2.20765937],
        [-6.75458666, 2.19776635],
        [-6.97923252, 2.17918784],
        [-7.19943567, 2.14910264],
        [-7.41380849, 2.10460917],
        [-7.62068289, 2.04286268],
        [-7.81772855, 1.96075388],
        [-8.00150070, 1.85523874],
        [-8.17451664, 1.73364282],
        [-8.33592353, 1.59691557],
        [-8.48454943, 1.44596000],
        [-8.61885045, 1.28176154],
        [-8.73684624, 1.10552002],
        [-8.83641062, 0.91898511],
        [-8.91415435, 0.72419395],
        [-8.96679915, 0.52449582],
        [-8.99141384, 0.32440206],
        [-8.98570610, 0.12927396],
        [-8.94824357, -0.05518523],
        [-8.87811071, -0.22308574],
        [-8.77406415, -0.36714582],
        [-8.64076925, -0.48366613],
        [-8.48515712, -0.57345710],
        [-8.31208305, -0.63761192],
        [-8.12530272, -0.67735132],
        [-7.92803861, -0.69457481],
        [-7.72291093, -0.69163751],
        [-7.51213739, -0.67168857],
        [-7.29762845, -0.63887324],
        [-7.08092078, -0.59770791],
        [-6.87096628, -0.55481332],
        [-6.66165960, -0.51851056],
        [-6.45340160, -0.49213941],
        [-6.24666534, -0.47886019],
        [-6.04208477, -0.48201396],
        [-5.84053152, -0.50509763],
        [-5.64333145, -0.55215747],
        [-5.45175046, -0.62475200],
        [-5.26537437, -0.71779472],
        [-5.08328826, -0.82635310],
        [-4.90419922, -0.94528086],
        [-4.72667739, -1.06951940],
        [-4.53508710, -1.19716334],
        [-4.34012652, -1.32076211],
        [-4.14205204, -1.44019063],
        [-3.94102308, -1.55535628],
        [-3.73714219, -1.66617287],
        [-3.53047550, -1.77255194],
        [-3.32099775, -1.87428646],
        [-3.10852752, -1.97090767],
        [-2.89264904, -2.06149986],
        [-2.67368217, -2.14645920],
        [-2.45182028, -2.22601175],
        [-2.22721013, -2.30032388],
        [-1.99992971, -2.36944384],
        [-1.77017383, -2.43365927],
        [-1.53823745, -2.49347942],
        [-1.30446262, -2.54953729],
        [-1.06923108, -2.60257627],
        [-0.83297142, -2.65346386],
        [-0.59609258, -2.70304702],
        [-0.35889762, -2.75320370],
        [-0.12207600, -2.80432833],
        [0.11419715, -2.85687719],
        [0.34975629, -2.91128441],
        [0.58449137, -2.96784355],
        [0.81834380, -3.02671807],
        [1.05130779, -3.08793758],
        [1.28342752, -3.15140460],
        [1.51477196, -3.21696130],
        [1.74540601, -3.28447010],
        [1.97537720, -3.35386677],
        [2.20476428, -3.42512370],
        [2.43407995, -3.49843054],
        [2.66445867, -3.56982510],
        [2.89579734, -3.63915545],
        [3.12811285, -3.70626575],
        [3.36142452, -3.77103526],
        [3.59578381, -3.83328566],
        [3.83125395, -3.89281687],
        [4.06786717, -3.94950916],
        [4.30561539, -4.00334707],
        [4.54448628, -4.05432856],
        [4.78448341, -4.10241144],
        [5.02562965, -4.14750115],
        [5.26799015, -4.18938427],
        [5.51163675, -4.22781230],
        [5.75667627, -4.26240792],
        [6.00319687, -4.29277058],
        [6.25133403, -4.31812111],
        [6.50091323, -4.33753926],
        [6.74949026, -4.34975233],
        [6.99469626, -4.35358072],
        [7.23510999, -4.34718784],
        [7.46897617, -4.32830467],
        [7.69445487, -4.29511568],
        [7.90961769, -4.24622087],
        [8.11240098, -4.18056734],
        [8.30081447, -4.09769778],
        [8.47195787, -3.99673501],
        [8.62246914, -3.87731113],
        [8.74840384, -3.73974789],
        [8.83365567, -3.58130999],
        [8.88325339, -3.41249974],
        [8.90125625, -3.23934824],
        [8.89099667, -3.06583063],
        [8.85521838, -2.89471719],
        [8.79558233, -2.72818524],
        [8.71263917, -2.56839923],
        [8.60613339, -2.41793959],
        [8.47600300, -2.27971561],
        [8.32523602, -2.15478070],
        [8.15642357, -2.04365117],
        [7.97199016, -1.94638773],
        [7.77426232, -1.86258892],
        [7.56546069, -1.79138148],
        [7.34769351, -1.73141447],
        [7.12304535, -1.68076615],
        [6.89329667, -1.63742958],
        [6.66015986, -1.59914308],
        [6.42535480, -1.56339914],
        [6.18812218, -1.52666347],
        [5.95143013, -1.48849458],
        [5.71560087, -1.44808823],
        [5.48098423, -1.40461981],
        [5.24792628, -1.35732884],
        [5.01676643, -1.30552289],
        [4.78778158, -1.24870040],
        [4.56117767, -1.18655055],
        [4.33726901, -1.11855751],
        [4.11639747, -1.04420767],
        [3.89893044, -0.96300823],
        [3.68543932, -0.87417398],
        [3.47670211, -0.77672694],
        [3.27369907, -0.66962642],
        [3.07773516, -0.55173129],
        [2.89056614, -0.42187689],
        [2.71460151, -0.27900337],
        [2.55318695, -0.12242622],
        [2.41087824, 0.04759341],
        [2.29341494, 0.22891575],
        [2.20631221, 0.41676203],
        [2.15341222, 0.60487294],
        [2.13674523, 0.78742992],
        [2.15710140, 0.95984131],
        [2.21604685, 1.11756294],
        [2.31744145, 1.25345868],
        [2.44801158, 1.37036723],
        [2.60420710, 1.46793836],
        [2.78355996, 1.54566724],
        [2.98367035, 1.60338325],
        [3.20184940, 1.64159915],
        [3.43440029, 1.66260645],
        [3.67726800, 1.67024542],
        [3.92638851, 1.66974981],
        [4.17767542, 1.66710646],
        [4.42896626, 1.66474465],
        [4.68026081, 1.66267811],
        [4.93155900, 1.66093537],
        [5.18286063, 1.65955132],
        [5.43395529, 1.65935966],
        [5.68357666, 1.66439092],
        [5.92986734, 1.67849506],
        [6.17036119, 1.70512148],
        [6.40202687, 1.74709882],
        [6.62148354, 1.80634014],
        [6.82529070, 1.88370592],
        [7.01035336, 1.97891100],
        [7.17387183, 2.09091448],
        [7.31331765, 2.21810339],
        [7.42628609, 2.35845156],
        [7.50951323, 2.50978129],
        [7.55914881, 2.66917022],
        [7.57056304, 2.83255280],
        [7.53717496, 2.99385995],
        [7.44920397, 3.14164434],
        [7.32978297, 3.27589164],
        [7.18196589, 3.39477972],
        [7.00845963, 3.49690390],
        [6.81240152, 3.58166442]
    ]

def reward_function(params):
    return float(score_steer_to_point_ahead(params))